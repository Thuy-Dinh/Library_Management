import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import jsPDF from 'jspdf'; // Import th∆∞ vi·ªán jsPDF
import './loanCreate.css'; 
import { CreateLoanApi } from '../../../api/loan';

function LoanCreate() {
    const navigate = useNavigate();

    const [formData, setFormData] = useState({
        lbCode: '',
        bookCodes: [],
        bookCodeInput: '',
        borrowType: 'M∆∞·ª£n t·∫°i ch·ªó'
    });

    const [errorMessage, setErrorMessage] = useState('');

    const handleChange = (e) => {
        setFormData({
            ...formData,
            [e.target.name]: e.target.value
        });
    };

    const handleAddBookCode = () => {
        if (!formData.bookCodeInput.trim()) return;

        setFormData((prevState) => ({
            ...prevState,
            bookCodes: [...prevState.bookCodes, prevState.bookCodeInput.trim()],
            bookCodeInput: ''
        }));
    };

    const handleRemoveBookCode = (index) => {
        setFormData((prevState) => ({
            ...prevState,
            bookCodes: prevState.bookCodes.filter((_, i) => i !== index)
        }));
    };

    const handleExportPDF = () => {
        const doc = new jsPDF();
        doc.setFont('Verdana');
        doc.setFontSize(16);
        doc.text('ƒê∆°n M∆∞·ª£n S√°ch', 20, 20);
        
        doc.setFontSize(12);
        doc.text(`M√£ th·∫ª b·∫°n ƒë·ªçc: ${formData.lbCode}`, 20, 40);
        doc.text(`H√¨nh th·ª©c m∆∞·ª£n: ${formData.borrowType}`, 20, 50);
        
        doc.text('Danh s√°ch m√£ s√°ch:', 20, 65);
        formData.bookCodes.forEach((code, index) => {
            doc.text(`${index + 1}. ${code}`, 30, 75 + index * 10);
        });

        doc.save(`don_muon_${formData.lbCode}.pdf`);
    };

    const handleSubmit = async (e) => {
        e.preventDefault();

        if (!formData.lbCode || formData.bookCodes.length === 0) {
            setErrorMessage("Vui l√≤ng nh·∫≠p m√£ th·∫ª v√† √≠t nh·∫•t m·ªôt m√£ s√°ch.");
            return;
        }

        console.log("D·ªØ li·ªáu ƒë∆°n m∆∞·ª£n:", formData);
        alert("ƒê∆°n m∆∞·ª£n s√°ch ƒë√£ ƒë∆∞·ª£c g·ª≠i!");

        await CreateLoanApi(formData.lbCode, formData.bookCodes, 1, null, formData.borrowType, 0); 
        
        handleExportPDF(); // Xu·∫•t PDF sau khi t·∫°o ƒë∆°n m∆∞·ª£n
        
        navigate("/admin/order-management");
        setErrorMessage('');
    };

    return (
        <div className="book-loan-form-container">
            <h2>üìö T·∫°o ƒê∆°n M∆∞·ª£n S√°ch</h2>
            {errorMessage && <p className="error-message">{errorMessage}</p>}
            <form onSubmit={handleSubmit}>
                <div className="form-group">
                    <label>M√£ th·∫ª b·∫°n ƒë·ªçc</label>
                    <input 
                        type="text" 
                        name="lbCode" 
                        placeholder="Nh·∫≠p m√£ th·∫ª" 
                        value={formData.lbCode} 
                        onChange={handleChange} 
                    />
                </div>

                <div className="form-group">
                    <label>Nh·∫≠p m√£ s√°ch</label>
                    <div className="book-code-input">
                        <input
                            type="text"
                            name="bookCodeInput"
                            placeholder="Nh·∫≠p m√£ s√°ch"
                            value={formData.bookCodeInput}
                            onChange={handleChange}
                        />
                        <button type="button" onClick={handleAddBookCode}>Th√™m</button>
                    </div>
                </div>

                {formData.bookCodes.length > 0 && (
                    <div className="book-code-list">
                        <strong>Danh s√°ch m√£ s√°ch:</strong>
                        <ul>
                            {formData.bookCodes.map((code, index) => (
                                <li key={index}>
                                    {code} 
                                    <button type="button" onClick={() => handleRemoveBookCode(index)}>‚ùå</button>
                                </li>
                            ))}
                        </ul>
                    </div>
                )}

                <div className="form-group">
                    <label>H√¨nh th·ª©c m∆∞·ª£n</label>
                    <input 
                        type="text" 
                        name="borrowType" 
                        value={formData.borrowType} 
                        readOnly
                    />
                </div>

                <button type="submit">Xu·∫•t ƒë∆°n</button>
            </form>
        </div>
    );
}

export default LoanCreate;